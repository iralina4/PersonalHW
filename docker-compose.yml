version: '3.8'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ege_tutor
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  meilisearch:
    image: getmeili/meilisearch:v1.5
    ports:
      - "7700:7700"
    volumes:
      - meili_data:/meili_data
    environment:
      MEILI_ENV: production
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY:-A0TtmeQyFUGBM3We9fbThjuaT3Zq8U72FQh6AO3F2-s}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/ege_tutor
      REDIS_URL: redis://redis:6379/0
      QDRANT_URL: http://qdrant:6333
      MEILI_URL: http://meilisearch:7700
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY:-A0TtmeQyFUGBM3We9fbThjuaT3Zq8U72FQh6AO3F2-s}
      YAGPT_API_URL: ${YAGPT_API_URL}
      YAGPT_API_KEY: ${YAGPT_API_KEY}
      YAGPT_MODEL: ${YAGPT_MODEL:-yandexgpt-lite}
    volumes:
      - ./data:/app/data
      - ./server/prompts:/app/prompts
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      meilisearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  worker:
    build:
      context: ./server
      dockerfile: Dockerfile
    command: celery -A app.celery worker --loglevel=info
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/ege_tutor
      REDIS_URL: redis://redis:6379/0
      QDRANT_URL: http://qdrant:6333
      MEILI_URL: http://meilisearch:7700
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY:-A0TtmeQyFUGBM3We9fbThjuaT3Zq8U72FQh6AO3F2-s}
      YAGPT_API_URL: ${YAGPT_API_URL}
      YAGPT_API_KEY: ${YAGPT_API_KEY}
      YAGPT_MODEL: ${YAGPT_MODEL:-yandexgpt-lite}
    volumes:
      - ./data:/app/data
      - ./server/prompts:/app/prompts
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      meilisearch:
        condition: service_healthy

  pdf:
    build:
      context: ./pdf-service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_URL: http://localhost:8000
    depends_on:
      api:
        condition: service_healthy

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - api
      - pdf

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  meili_data:

